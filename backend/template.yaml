AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Todo Application Backend

Parameters:
  WebACLArn:
    Type: String
    Description: The ARN of the WAFv2 WebACL created in us-east-1.

Globals:
  Function:
    Timeout: 5
    MemorySize: 128
    Runtime: python3.9
    Environment:
      Variables:
        TODOS_TABLE: !Ref TodosTable
  Api:
    Cors:
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowOrigin: "'http://localhost:3001'"
    Auth:
      DefaultAuthorizer: CognitoUserPoolAuthorizer
      Authorizers:
        CognitoUserPoolAuthorizer:
          UserPoolArn: !GetAtt CognitoUserPool.Arn

Resources:
  # DynamoDB Table
  TodosTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: String
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TodoAppUserPool
      UsernameAttributes: ['email']
      Schema:
        - Name: email
          AttributeDataType: String
          Required: true
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref CognitoUserPool
      ClientName: "TodoAppClient"
      GenerateSecret: false  # Lambda Functions & API Gateway Endpoints
  CreateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todos/
      Handler: create.lambda_handler
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TodosTable }
      Events:
        ApiEvent: { Type: Api, Properties: { Path: /todos, Method: post } }

  ListTodosFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todos/
      Handler: list.lambda_handler
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TodosTable }
      Events:
        ApiEvent:
          Type: Api
          Properties:
            Path: /todos
            Method: get
            Auth:
              Authorizer: NONE
  GetTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todos/
      Handler: get.lambda_handler
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TodosTable }
      Events:
        ApiEvent: { Type: Api, Properties: { Path: '/todos/{id}', Method: get } }

  UpdateTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todos/
      Handler: update.lambda_handler
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TodosTable }
      Events:
        ApiEvent: { Type: Api, Properties: { Path: '/todos/{id}', Method: put } }

  DeleteTodoFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: todos/
      Handler: delete.lambda_handler
      Policies:
        - DynamoDBCrudPolicy: { TableName: !Ref TodosTable }
      Events:
        ApiEvent: { Type: Api, Properties: { Path: '/todos/{id}', Method: delete } }
  FrontendS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
        
  FrontendS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref FrontendS3Bucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: "*"
            Action: s3:GetObject
            Resource: !Sub "arn:aws:s3:::${FrontendS3Bucket}/*"

  FrontendCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt FrontendS3Bucket.DomainName
            S3OriginConfig: {}
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          Compress: true
          AllowedMethods: ["GET", "HEAD", "OPTIONS"]
          CachedMethods: ["GET", "HEAD", "OPTIONS"]
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
        WebACLId: !Ref WebACLArn
Outputs:
  S3BucketName:
    Description: "Name of the S3 bucket for the frontend assets"
    Value: !Ref FrontendS3Bucket
  CloudFrontDistributionId:
    Description: "ID of the CloudFront distribution"
    Value: !Ref FrontendCloudFrontDistribution
  CloudFrontDistributionDomainName:
    Description: "Domain name of the CloudFront distribution"
    Value: !GetAtt FrontendCloudFrontDistribution.DomainName
  Region:
    Description: "AWS Region"
    Value: !Ref AWS::Region
  CognitoUserPoolId:
    Description: "The ID of the Cognito User Pool"
    Value: !Ref CognitoUserPool
  CognitoUserPoolClientId:
    Description: "The ID of the Cognito User Pool Client"
    Value: !Ref CognitoUserPoolClient
